type Broker {
    brokerId: ID!,
    firstName: String,
    lastName: String,
    email: String,
    phoneNumber: String
}

type FlatRequest {
    flatRequestId: ID!,
    clientId: ID,
    floorNumberLowerBound:Int
    floorNumberUpperBound:Int
    totalAreaLowerBound:Int,
    totalAreaUpperBound:Int,
    priceLowerBound:Int,
    priceUpperBound:Int,
    roomsNumberLowerBound:Int,
    roomsNumberUpperBound:Int,
    description:String
}

type FlatRequestCache {
    flatRequestCacheId: ID,
    floorNumberLowerBound:Int
    floorNumberUpperBound:Int
    totalAreaLowerBound:Int,
    totalAreaUpperBound:Int,
    priceLowerBound:Int,
    priceUpperBound:Int,
    roomsNumberLowerBound:Int,
    roomsNumberUpperBound:Int,
    description:String
}

type Flat {
    flatId: ID!,
    clientId: ID,
    brokerId: ID,
    isBrokerAccepted:Boolean,
    floorNumber:Int
    totalArea:Int
    price:Int
    description:String
}

input FlatInput{
    floor:Int,
    price:Int,
    totalArea:Int
    roomsNumber:Int
}

type Query {
    allBrokers:[Broker]
    broker(id: ID):Broker!
    flatRequest(id: ID):FlatRequest!
    filtered(flatId:ID):[FlatRequestCache]
    allFlats:[Flat]
    flat(id: ID):Flat
}

type Mutation{
    create(clientId:ID!,floorNumberLowerBound:Int!,floorNumberUpperBound:Int!,totalAreaLowerBound:Int!,totalAreaUpperBound:Int!,priceLowerBound:Int!,
        priceUpperBound:Int!,roomsNumberLowerBound:Int!,roomsNumberUpperBound:Int!,description:String!):FlatRequest
    update(id:ID!,floorNumberLowerBound:Int!,floorNumberUpperBound:Int!,totalAreaLowerBound:Int!,totalAreaUpperBound:Int!,priceLowerBound:Int!,
        priceUpperBound:Int!,roomsNumberLowerBound:Int!,roomsNumberUpperBound:Int!,description:String!):FlatRequest
    delete(id:ID!):Boolean
}
